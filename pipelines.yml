resources:
  - name: git_repo
    type: GitRepo
    configuration:
      gitProvider: GitHub                       # <-- replace with your integration
      path: alony2811/sample-web-app   # <-- replace with your repository name
      branches:
        include: main

  - name: art_image
    type: Image
    configuration:
      registry: alonyartifactory                               # <-- replace with your artifactory integration
      sourceRepository: webapp-prod-repo               # <-- required if registry is Artifactory
      imageName: alony.jfrog.io/webapp-prod-repo/webappimage  # < -- replace with your image path and name
      imageTag: latest
      autoPull: true
      
  - name: webapp_build_info
    type: BuildInfo
    configuration:
      sourceArtifactory: alonyartifactory
      buildName: webapp_build
      buildNumber: 1   
     
      
pipelines:
  - name: master_pipeline
    steps:
      - name: docker_build
        type: DockerBuild
        configuration:
          affinityGroup: dbp_group
          dockerFileLocation: .
          dockerFileName: Dockerfile
          dockerImageName: alony.jfrog.io/webapp-prod-repo/webappimage/builds  # replace with your image path and name
          dockerImageTag: ${run_number}
          inputResources:
            - name: git_repo
          integrations:
            - name: alonyartifactory                            # <-- replace with your artifactory integration

      - name: docker_push
        type: DockerPush
        configuration:
          affinityGroup: dbp_group
          targetRepository: webapp-prod-repo
          forceXrayScan: true
          failOnScan: false                                     # <--- should be "true" if we want to failed the build once the scan found violations
          autoPublishBuildInfo: true
          integrations:
            - name: alonyartifactory                           # <-- replace with your artifactory integration
          inputSteps:
            - name: docker_build
          outputResources:
            - name: art_image
            - name: webapp_build_info
            
      - name: deployment
        type: Bash
        inputSteps:
            - name: docker_push
        execution:
          onStart:
            - echo "Preparing for work..."
          onExecute:
            - wget https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-265.0.0-linux-x86_64.tar.gz
            - tar -zxf google-cloud-sdk-*
            - cd google-cloud-sdk
            - CLOUDSDK_CORE_DISABLE_PROMPTS=1 ./install.sh
            

      

       

      
      



